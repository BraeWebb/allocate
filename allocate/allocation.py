import csv
import sys
import pprint
import argparse
from typing import Dict, List

from allocate.solver import validate_availability, Engine
from allocate.model import Tutor, Session
from allocate.csvalidator import CSVModel
from allocate.doodle import parse_doodle_to_stub, parse_doodle_hack


def solution_to_csv(solution: Dict[str, List[str]], output):
    """Convert the solution dictionary produced by the solver into a
    CSV file that can be distributed to tutors.
    """
    writer = csv.writer(output)

    for name, sessions in solution.items():
        writer.writerow([name, *sessions])


def stub_files(tutors: str, sessions: str, availability: str):
    """Write out stub files for tutors and sessions based on the
    given availability file."""
    tutors_names, sessions_details = parse_doodle_to_stub(availability)

    with open(tutors, 'x') as file:
        writer = csv.writer(file)

        # write header
        writer.writerow(Tutor.__annotations__.keys())
        columns = len(Tutor.__annotations__)
        # write tutor names
        for tutor in sorted(tutors_names):
            writer.writerow([tutor] + ["" for _ in range(columns - 1)])

    with open(sessions, 'x') as file:
        writer = csv.writer(file)

        # write header
        writer.writerow(Session.__annotations__.keys())
        # write session names
        for session in sessions_details:
            writer.writerow(["", session.day, session.start, session.duration, "", ""])


def run_allocation(tutors: str, sessions: str, availability: str,
                   json: bool = False):
    tutor_model = CSVModel(Tutor)
    tutor_model.load(tutors, allow_defaults=True)

    session_model = CSVModel(Session)
    session_model.load(sessions, allow_defaults=True)

    availability_data = parse_doodle_hack(availability, tutor_model, session_model)

    for message in validate_availability(availability_data):
        print(message)

    engine = Engine(tutor_model, session_model, availability_data)
    solution = engine.solve()

    if solution is None:
        print("No allocation was found because the allocation is infeasible.")
        print("Please ensure that a valid allocation is possible based on tutor availability.")
        print("If you think something is wrong, contact Brae at b.webb@uq.edu.au")
    else:
        if json:
            pprint.pprint(solution)
        else:
            solution_to_csv(solution, sys.stdout)


def main():
    parser = argparse.ArgumentParser(prog="allocate",
                                     description="Allocate tutors to sessions")

    parser.add_argument('tutors', type=str,
                        help='CSV file containing tutor details')
    parser.add_argument('sessions', type=str,
                        help='CSV file containing session details')
    parser.add_argument('availability', type=str,
                        help='CSV file of tutors availabilities to sessions')

    parser.add_argument('--stub', action='store_true',
                        help='Write to the tutor and session files a stub table generated by the allocations file')
    parser.add_argument('--json', action="store_true",
                        help='Output solution as a JSON object instead of default')

    args = parser.parse_args()

    if args.stub:
        stub_files(args.tutors, args.sessions, args.availability)
    else:
        run_allocation(args.tutors, args.sessions, args.availability, json=args.json)


if __name__ == '__main__':
    main()
